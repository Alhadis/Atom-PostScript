".source.postscript":
	"If condition":
		prefix: "if"
		body: """
			${1:true} {
				$0
			} if
		"""

	"If/else condition":
		prefix: "ife"
		body: """
			${1:true} {
				${2:then}
			} {
				${3:else}
			} ifelse
			$0
		"""

	Function:
		prefix: "fn"
		body: """
			/${1:name} {
				$0
			} bind def
		"""

	"For loop":
		prefix: "for"
		body: """
			${1:initial} ${2:increment} ${3:limit} {
				$0
			} for
		"""

	"For/each loop":
		prefix: "each"
		body: """
			{
				$0
			} forall
		"""

	"Try/Catch":
		prefix: "try"
		body: """
			{
				${1:try}
			} stopped {
				\\$error /newerror false put
				${2:catch}
			} if
			$0
		"""

	"File handle":
		prefix: "file"
		leftLabel: "Files"
		description: "Open a filename for reading or writing"
		body: "(${1:path}) (${2:r}) file$0"

	"Standard input":
		prefix: "in"
		leftLabel: "Files"
		description: "Return handle for stdin"
		body: "(%stdin) (r) file"
	
	"Standard output":
		prefix: "out"
		leftLabel: "Files"
		description: "Return handle for stdout"
		body: "(%stdout) (w) file"

	"Standard error":
		prefix: "err"
		leftLabel: "Files"
		description: "Return handle for stderr"
		body: "(%stderr) (w) file"

	"Page example":
		prefix: "page"
		body: """
			%!PS
			/Times-Roman findfont 10 scalefont setfont
			${2:100} ${3:300} moveto
			(${1:Hello, world.}) show
			$0
			showpage
		"""

	"Page size":
		prefix: "size"
		leftLabel: "Page size"
		description: "Retrieve the dimensions of the current page"
		body: """
			currentpagedevice /PageSize get dup
			0 get /PageWidth  exch def
			1 get /PageHeight exch def
			$0
		"""

	"Page width":
		prefix: "width"
		leftLabel: "Page width"
		description: "Retrieve the width of the current page"
		body: "currentpagedevice /PageSize get 0 get $0"

	"Page height":
		prefix: "height"
		leftLabel: "Page height"
		description: "Retrieve the height of the current page"
		body: "currentpagedevice /PageSize get 1 get $0"

	"PDFmark, Shim":
		prefix: "pdfshim"
		leftLabel: "PDFMark: Shim"
		description: "Compatibility code for PostScript engines that don't support the PDFMark extension."
		descriptionMoreURL: "https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/pdfmark_reference.pdf#page=10"
		body: """
			%%BeginProlog
			/pdfmark where
				{ pop }
				{
					/globaldict where
						{ pop globaldict }
						{ userdict }
					ifelse
					/pdfmark /cleartomark load put
				} ifelse
			%%EndProlog
		"""

	"Print Ascii85-encoded data":
		prefix: "85"
		leftLabel: "ASCII85: Print"
		description: "Print an Ascii85-encoded representation of a string."
		body: """
			(%stdout) (w) file
				dup (<~) print
				dup /ASCII85Encode filter
				dup (${1:Foo\\\\n}) writestring
				closefile
				() = flush
			closefile
			$0
		"""
